let products = [];
let cart = [];
let cartCount = 0;

document.addEventListener("DOMContentLoaded", () => {
  fetchProducts();
});

// Fetch products from API
function fetchProducts() {
  fetch("https://fakestoreapi.in/api/products?limit=20")
    .then((response) => response.json())
    .then((data) => {
      products = data?.products;
      displayProducts(products);
    })
    .catch((err) => console.log("Error fetching products:", err));
}

// Display products
function displayProducts(productsToDisplay) {
  const productsContainer = document.getElementById("productsContainer");
  productsContainer.innerHTML = ""; // Clear existing products

  productsToDisplay.forEach((product) => {
    const productCard = document.createElement("div");
    productCard.classList.add("product-card");

    // Description with toggle for expanding/collapsing
    const truncatedDescription = product.description.slice(0, 150);
    const fullDescription = product.description;

    productCard.innerHTML = `
        <img src="${product.image}" alt="${product.title}">
        <h3>${product.title}</h3>
        <p class="description" id="description-${product.id}">${truncatedDescription}...</p>
        <p class="expandable-description" id="full-description-${product.id}" style="display:none;">
            ${fullDescription}
        </p>
        <span class="description-toggle" id="toggle-${product.id}" onclick="toggleDescription(${product.id})">More</span>
        <h3>$${product.price}</h3>
        <div id="addRemoveBtn-${product.id}">
            <button onclick="addToCart(${product.id})">Add to Cart</button>
        </div>
    `;
    productsContainer.appendChild(productCard);
  });
}

// Toggle description between truncated and full description
function toggleDescription(productId) {
  const description = document.getElementById(`description-${productId}`);
  const fullDescription = document.getElementById(
    `full-description-${productId}`
  );
  const toggleText = document.getElementById(`toggle-${productId}`);

  // Toggle visibility of description and update button text
  if (fullDescription.style.display === "none") {
    fullDescription.style.display = "block"; // Show the full description
    description.style.display = "none"; // Hide the truncated description
    toggleText.textContent = "Less"; // Change text to 'Less'
  } else {
    fullDescription.style.display = "none"; // Hide the full description
    description.style.display = "block"; // Show the truncated description
    toggleText.textContent = "More"; // Change text to 'More'
  }
}

// Add product to cart
function addToCart(productId) {
  const product = products.find((p) => p.id === productId);

  // Check if the product is already in the cart
  if (!cart.some((item) => item.id === productId)) {
    cart.push(product);
    cartCount++;
    updateCartCount();
    updateProductButtonState(productId, "remove");
  }
}

// Remove product from cart
function removeFromCart(productId) {
  const productIndex = cart.findIndex((item) => item.id === productId);
  if (productIndex !== -1) {
    cart.splice(productIndex, 1);
    cartCount--;
    updateCartCount();
    displayCartItems();
    updateProductButtonState(productId, "add");
  }
}

// Update cart count display
function updateCartCount() {
  document.getElementById("cartBadge").textContent = cartCount;
}

function updateProductButtonState(productId, action) {
  const buttonContainer = document.getElementById(`addRemoveBtn-${productId}`);

  const isInCart = cart.some((item) => item.id === productId);

  if (isInCart) {
    buttonContainer.innerHTML = `<button onclick="removeFromCart(${productId})">Remove from Cart</button>`;
  } else {
    buttonContainer.innerHTML = `<button onclick="addToCart(${productId})">Add to Cart</button>`;
  }
}

// Toggle cart modal visibility
function toggleCart() {
  const cartModal = document.getElementById("cartModal");
  cartModal.style.display =
    cartModal.style.display === "flex" ? "none" : "flex";
  displayCartItems();
}

// Display cart items
function displayCartItems() {
  const cartItemsContainer = document.getElementById("cartItems");
  cartItemsContainer.innerHTML = "";

  if (cart.length === 0) {
    cartItemsContainer.innerHTML = "<p>Your cart is empty.</p>";
  } else {
    cart.forEach((item) => {
      const cartItem = document.createElement("div");
      cartItem.classList.add("cart-item");
      cartItem.innerHTML = `
                <div>${item.title}</div>
                <h2 style="margin: 0;">$${item.price}</h2>
                <button onclick="removeFromCart(${item.id})">Remove</button>
                <hr />
            `;
      cartItemsContainer.appendChild(cartItem);
    });
  }
}

// Clear the cart
function clearCart() {
  cart.length = 0;
  cartCount = 0;
  updateCartCount();
  displayCartItems();
}

// Search products by name
function searchProducts() {
  const searchTerm = document.getElementById("search").value.toLowerCase();
  const filteredProducts = products.filter((product) =>
    product.title.toLowerCase().includes(searchTerm)
  );
  displayProducts(filteredProducts);
}
